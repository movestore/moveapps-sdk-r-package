% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/moveapps.R
\name{createMoveAppsShinyUI}
\alias{createMoveAppsShinyUI}
\title{Create MoveApps Shiny User Interface}
\usage{
createMoveAppsShinyUI(request)
}
\arguments{
\item{request}{A Shiny HTTP request object. This parameter follows Shiny's
standard UI function signature for bookmark-enabled applications but is
not actively used in the current implementation.}
}
\value{
A \code{\link[shiny]{fluidPage}} object containing the complete Shiny UI layout
with embedded JavaScript files, CSS styles, module interface, and
bookmark functionality.
}
\description{
Creates the user interface for a MoveApps Shiny application simulation.
This function builds a fluid page layout with necessary JavaScript files,
CSS styles, UI components for the Shiny module interface, and WebSocket
connectivity enhancements for stable long-running operations.
}
\details{
The function creates a UI that includes the following components:
\itemize{
\item WebSocket keep-alive JavaScript fix and associated CSS for connection stability
\item Custom JavaScript for extracting Shiny input values to JSON format
\item The main Shiny module user interface via \code{shinyModuleUserInterface}
\item WebSocket heartbeat text output for maintaining connection during long operations
\item A bookmark button for saving application settings with custom styling
}

The WebSocket fixes are implemented to address known issues with Shiny
WebSocket connections timing out during long-running operations, which is
common in data processing applications.
}
\section{Required Functions}{

This function expects the following to be defined by the app developer:
\itemize{
\item \code{shinyModuleUserInterface}: Function that returns the UI for the app's Shiny module
}
}

\section{Static Resources}{

The function loads the following bundled resources:
\itemize{
\item \code{ws-keep-alive-fix.js}: JavaScript for WebSocket connection maintenance
\item \code{ws-keep-alive-fix.css}: CSS styles for WebSocket fix components
\item \code{extract-inputs.js}: JavaScript for extracting input values to JSON
}
}

\examples{
\dontrun{
# Define the module UI function
shinyModuleUserInterface <- function(id) {
  ns <- NS(id)
  tagList(
    sliderInput(ns("slider"), "Value:", min = 1, max = 100, value = 50),
    plotOutput(ns("plot"))
  )
}

# Use in a Shiny application
ui <- createMoveAppsShinyUI
server <- createMoveAppsShinyServer
shinyApp(ui = ui, server = server)
}

}
\seealso{
\code{\link{createMoveAppsShinyServer}} for the corresponding server function,
\code{\link[shiny]{fluidPage}}, \code{\link[shiny]{includeScript}}, \code{\link[shiny]{includeCSS}},
\code{\link[shiny]{textOutput}}, \code{\link[shiny]{bookmarkButton}}
}
