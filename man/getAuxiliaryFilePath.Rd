% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/io_app_files.R
\name{getAuxiliaryFilePath}
\alias{getAuxiliaryFilePath}
\title{Get Auxiliary File Path}
\usage{
getAuxiliaryFilePath(appSpecUserFileSettingId, fallbackToProvidedFiles = TRUE)
}
\arguments{
\item{appSpecUserFileSettingId}{Character string. The ID of the requested set of app-files
(see counterpart in \code{appspec.json} at \code{setting[type=USER_FILE].id})}

\item{fallbackToProvidedFiles}{Logical. Should the function fallback to bundled directory
of requested auxiliary file if the user did not upload anything? Default is \code{TRUE}.}
}
\value{
Character string containing the path to the requested file, or \code{NULL}
if the user did not upload anything and no fallback was provided.
}
\description{
Provides the path to an auxiliary file. Auxiliary files are files that:
\itemize{
\item Are needed by the app to work during runtime
\item Get uploaded by the user during app configuration time
\item Will not generate warnings if the requested file is not available
(e.g., the user did not upload anything and the app developer did not provide any fallback)
\item Can also be provided by the app developer and get bundled into the app during build time (as fallback)
}
}
\details{
The function first checks for user-uploaded files in the user upload directory.
If no user files are found and \code{fallbackToProvidedFiles} is \code{TRUE},
it falls back to app developer provided files. The function expects exactly
one file in the target directory; if zero or more than one file is found,
it returns \code{NULL} and logs a warning.
}
\examples{
\dontrun{
# Get path to user-uploaded configuration file
config_path <- getAuxiliaryFilePath("config_file")

# Get path without fallback to developer-provided files
user_data <- getAuxiliaryFilePath("user_data", fallbackToProvidedFiles = FALSE)
}

}
