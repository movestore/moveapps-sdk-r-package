% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logger.R
\name{logger.init}
\alias{logger.init}
\title{Initialize the logger with threshold from environment or parameter}
\usage{
logger.init(threshold_param = NULL)
}
\arguments{
\item{threshold_param}{Optional. A character level name (e.g., "INFO") or one of
the level constants (e.g., INFO) to be used as threshold when the environment
variable is not set.}
}
\value{
No return value, called for side effects (sets internal logger threshold)
}
\description{
Initializes the logging system by configuring the logger threshold. You can
control the threshold via the LOG_LEVEL_SDK environment variable or by
passing the optional threshold_param argument.
This function should be called once at the start of your application to set up
the logging behavior.
}
\details{
Final threshold resolution priority:
\enumerate{
\item If environment variable LOG_LEVEL_SDK is set, use it.
\item Otherwise, if threshold_param is provided, use it.
\item Otherwise, fall back to "DEBUG".
}

The function searches for log level constants in the current package namespace first,
then falls back to the global environment if needed.

Valid values are:
\itemize{
\item "FATAL" - Only critical errors (level 1)
\item "ERROR" - Errors and above (level 2)
\item "WARN" - Warnings and above (level 4)
\item "INFO" - Informational messages and above (level 6)
\item "DEBUG" - Debug messages and above (level 8, default)
\item "TRACE" - All messages including trace (level 9)
}
}
\note{
If an invalid value is provided (environment or parameter), the function
will issue a warning and fall back to DEBUG level logging.
}
\examples{
# Initialize with default DEBUG level
logger.init()

# Set environment variable and initialize
Sys.setenv(LOG_LEVEL_SDK = "INFO")
logger.init()

# Or set via parameter (useful in tests)
logger.init(threshold_param = "WARN")
logger.init(threshold_param = INFO)

# Example with invalid level (will warn and use DEBUG)
Sys.setenv(LOG_LEVEL_SDK = "INVALID")
logger.init()  # Warning issued, DEBUG level used

}
\seealso{
\code{\link{logger.log_level}} for the core logging function that uses this threshold,
\code{\link{Sys.getenv}} for environment variable access,
Log level constants: \code{\link{FATAL}}, \code{\link{ERROR}}, \code{\link{WARN}},
\code{\link{INFO}}, \code{\link{DEBUG}}, \code{\link{TRACE}}
}
