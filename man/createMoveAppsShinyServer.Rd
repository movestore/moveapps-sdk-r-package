% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/moveapps.R
\name{createMoveAppsShinyServer}
\alias{createMoveAppsShinyServer}
\title{Create MoveApps Shiny Server Function}
\usage{
createMoveAppsShinyServer(input, output, session)
}
\arguments{
\item{input}{Standard Shiny server input object containing reactive values
from UI components.}

\item{output}{Standard Shiny server output object for sending data to the UI.}

\item{session}{Standard Shiny server session object for managing the user session,
including bookmarks, custom messages, and application lifecycle.}
}
\value{
No explicit return value. The function sets up reactive observers
and handles all server-side logic through side effects including file I/O,
bookmark management, and application state management.
}
\description{
Implements the server logic for a MoveApps Shiny application simulation.
This function handles data reading, module execution, bookmark management,
result storage, error handling, and WebSocket connectivity management for
the Shiny application.
}
\details{
The function performs the following operations:
\itemize{
\item Reads input data using \code{\link{readInput}} from the configured source file
\item Calls the Shiny module (\code{shinyModule}) with data if available
\item Automatically restores bookmarks from previous sessions on startup
\item Handles bookmark creation when the bookmark button is clicked
\item Extracts and saves Shiny input values as JSON for external access
\item Stores computation results to output file when processing completes
\item Implements WebSocket heartbeat mechanism for connection stability
\item Provides comprehensive error handling with logging and appropriate app termination
}
}
\section{Bookmark Management}{

The function implements a dual bookmarking system:
\itemize{
\item Native Shiny RDS bookmarking for session restoration
\item Custom JSON bookmarking for external access to input values
\item Automatic bookmark restoration on application startup
\item Exclusion of the bookmark button itself from saved state
}
}

\section{Error Handling}{

Errors are handled with different strategies based on error codes:
\itemize{
\item Error code 10: Triggers application termination via \code{\link[shiny]{stopApp}}
\item Other errors: Logged and re-thrown for proper error propagation
\item All errors are stored to the error file for debugging
}
}

\section{Required Functions}{

This function expects the following to be defined by the app developer:
\itemize{
\item \code{shinyModule}: The main Shiny module server function
}
}

\examples{
\dontrun{
# Define the module server function
shinyModule <- function(input, output, session, data = NULL) {
  output$plot <- renderPlot({
    plot(1:input$slider)
  })

  return(reactive({
    # Return processed data
    list(slider_value = input$slider, timestamp = Sys.time())
  }))
}

# Use in a Shiny application
ui <- createMoveAppsShinyUI
server <- createMoveAppsShinyServer
shinyApp(ui = ui, server = server, enableBookmarking = "server")
}

}
\seealso{
\code{\link{createMoveAppsShinyUI}} for the corresponding UI function,
\code{\link{readInput}} for data input,
\code{\link{storeResult}} for result storage,
\code{\link{restoreShinyBookmark}}, \code{\link{saveBookmarkAsLatest}}, \code{\link{saveInputAsJson}} for bookmark management,
\code{\link{storeToFile}} for error logging,
\code{\link{notifyDone}}, \code{\link{notifyPushBookmark}} for external notifications
}
